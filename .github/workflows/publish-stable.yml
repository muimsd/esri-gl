name: Publish Stable to NPM

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  publish-stable:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org/'

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            echo "Using npm ci (lockfile present)"
            npm ci
          else
            echo "No package-lock.json found. Falling back to npm install"
            npm install
          fi

      - name: Run validation
        run: npm run validate

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Bump version
        run: npm version ${{ github.event.inputs.version_type }} --no-git-tag-version

      - name: Get package version
        id: package-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Build package
        run: npm run build:prod

      - name: Publish to NPM (latest)
        run: npm publish --tag latest
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Extract release notes
        id: extract-notes
        run: |
          VERSION=${{ steps.package-version.outputs.version }}
          
          # Extract release notes from CHANGES.md
          if [ -f CHANGES.md ]; then
            # Get content between current version and next version/end of file
            NOTES=$(awk "/^### v?${VERSION//./\\.}/"',/^### v?[0-9]/{if(!/^### v?'"${VERSION//./\\.}"'/)exit}1' CHANGES.md | tail -n +2)
            
            # If no specific notes found, create default ones
            if [ -z "$NOTES" ]; then
              NOTES="## What's Changed
          
          - See commit history for detailed changes
          - Bug fixes and improvements"
            fi
          else
            NOTES="## What's Changed
          
          - See commit history for detailed changes
          - Bug fixes and improvements"
          fi
          
          # Save to file for multiline output
          echo "$NOTES" > release_notes.md

      - name: Create GitHub Release (Stable)
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.package-version.outputs.version }}
          release_name: Release v${{ steps.package-version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: stable-build-artifacts-v${{ steps.package-version.outputs.version }}
          path: |
            dist/
            package.json
            README.md
            LICENSE
          retention-days: 90